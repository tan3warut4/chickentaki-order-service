package com.chickentaki.order_service_be.model;

import jakarta.persistence.*; // Important: import ALL JPA annotations from jakarta.persistence
import java.math.BigDecimal;
import java.time.OffsetDateTime; // For TIMESTAMP WITH TIME ZONE
import java.util.UUID;

// JPA Annotations
@Entity // Marks this class as a JPA entity (maps to a database table)
@Table(name = "menus") // Specifies the actual table name in the database
public class Menu {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.UUID)
    // For UUID primary keys, you generally let the application generate them
    // or rely on the DB default (like gen_random_uuid()) if it's set in the migration.
    // If you let JPA manage generation (less common for UUIDs generated by DB func):
    // @GeneratedValue(strategy = GenerationType.UUID) // For Hibernate to generate UUIDs
    private UUID id;

    @Column(nullable = false, unique = true) // Maps to 'name' column, NOT NULL and UNIQUE
    private String name;

    private String description; // Maps to 'description' column (optional column annotation)

    @Column(nullable = false) // Maps to 'price' column, NOT NULL
    private BigDecimal price; // Use BigDecimal for NUMERIC/DECIMAL types

    @Enumerated(EnumType.STRING) // Tells JPA to store the enum as its String name in the DB
    @Column(nullable = false) // Maps to 'category' column, NOT NULL
    private MenuCategory category; // Your Java enum matching the DB ENUM type

    @Column(name = "image_url") // Maps to 'image_url' column (if name differs from field)
    private String imageUrl;

    @Column(nullable = false) // Maps to 'available' column, NOT NULL
    private Boolean available;

    @Column(name = "created_at") // Maps to 'created_at' column
    private OffsetDateTime createdAt;

    @Column(name = "updated_at") // Maps to 'updated_at' column
    private OffsetDateTime updatedAt;

    // --- Constructors ---
    // JPA requires a no-argument constructor (at least protected or public)
    public Menu() {
    }

    // Optional: All-arguments constructor for convenience
    public Menu(UUID id, String name, String description, BigDecimal price, MenuCategory category, String imageUrl, Boolean available, OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.price = price;
        this.category = category;
        this.imageUrl = imageUrl;
        this.available = available;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    // --- Getters and Setters ---
    // (Your IDE can auto-generate these for you: e.g., in IntelliJ, right-click -> Generate... -> Getter and Setter)
    // You need a getter and setter for every field you want mapped.

    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }
    public MenuCategory getCategory() { return category; }
    public void setCategory(MenuCategory category) { this.category = category; }
    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }
    public Boolean getAvailable() { return available; }
    public void setAvailable(Boolean available) { this.available = available; }
    public OffsetDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(OffsetDateTime createdAt) { this.createdAt = createdAt; }
    public OffsetDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(OffsetDateTime updatedAt) { this.updatedAt = updatedAt; }

    @PrePersist // JPA lifecycle callback: sets createdAt and updatedAt before persisting
    protected void onCreate() {
        this.createdAt = OffsetDateTime.now();
        this.updatedAt = OffsetDateTime.now();
    }

    @PreUpdate // JPA lifecycle callback: updates updatedAt before updating
    protected void onUpdate() {
        this.updatedAt = OffsetDateTime.now();
    }
}